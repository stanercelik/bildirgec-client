import 'dart:async';
import 'package:contexto_turkish/constants/api_constant.dart';
import 'package:contexto_turkish/utils/show_how_to_dialog.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../models/guess.dart';

class GuessViewController extends GetxController {
  var guesses = <Guess>[].obs;
  var guessText = ''.obs;
  var lastGuess = Guess(word: '', distance: 0).obs;
  var errorMessage = ''.obs;
  var isGameOver = false.obs;
  var resultMessage = ''.obs;

  void prepareResultMessage(bool gaveUp) {
    String status = gaveUp
        ? 'Bildirgec oynadÄ±m ama ${guesses.length} tahminden sonra pes ettim!'
        : 'Bildirgec oynadÄ±m ve ${guesses.length}. tahminde doÄŸru kelimeyi bulabildim!';

    // Tahminlerin sÄ±nÄ±rlarÄ±na gÃ¶re gruplandÄ±rÄ±lmasÄ±
    int greenGuesses = guesses.where((guess) => guess.distance <= 1000).length;
    int orangeGuesses = guesses
        .where((guess) => guess.distance <= 2500 && guess.distance > 1000)
        .length;
    int redGuesses = guesses.where((guess) => guess.distance > 2500).length;

    // Maksimum 6 emoji olacak ÅŸekilde oranlara gÃ¶re emoji sayÄ±sÄ±nÄ± belirliyoruz
    int totalGuesses = greenGuesses + orangeGuesses + redGuesses;

    int maxEmojis = 6;
    int greenEmojiCount = (maxEmojis * greenGuesses / totalGuesses).round();
    int orangeEmojiCount = (maxEmojis * orangeGuesses / totalGuesses).round();
    int redEmojiCount = (maxEmojis * redGuesses / totalGuesses).round();

    // Emojilerin gÃ¶sterimi
    String greenEmojis = 'ğŸŸ©' * greenEmojiCount;
    String orangeEmojis = 'ğŸŸ§' * orangeEmojiCount;
    String redEmojis = 'ğŸŸ¥' * redEmojiCount;

    // Tahmin sayÄ±larÄ±nÄ± alt alta gÃ¶sterecek ÅŸekilde dÃ¼zenliyoruz
    resultMessage.value = "$status\n\n"
        "$greenEmojis $greenGuesses\n"
        "$orangeEmojis $orangeGuesses\n"
        "$redEmojis $redGuesses";
  }

  // Tahmin gÃ¶nderme fonksiyonu
  Future<void> submitGuess(BuildContext context) async {
    final guessedWord = guessText.value.trim();

    // EÄŸer tahmin boÅŸsa iÅŸlemi sonlandÄ±r
    if (guessedWord.isEmpty) {
      errorMessage.value = 'Bir kelime girmelisiniz!';
      return;
    }

    // Kelimenin zaten listede olup olmadÄ±ÄŸÄ±nÄ± kontrol et
    if (guesses.any((guess) => guess.word == guessedWord)) {
      errorMessage.value = 'Bu kelime zaten listede mevcut!';
      return;
    }

    try {
      // API'ye istek gÃ¶nderme
      final response = await http.post(
        Uri.parse('${APIConstant.apiDomain}/similarity'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'word': guessedWord}),
      );

      // EÄŸer istek baÅŸarÄ±lÄ±ysa
      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);

        // `rank` deÄŸeri null deÄŸilse ve int tipindeyse
        final rank = responseData['rank'];
        if (rank != null && rank is int) {
          // Hata mesajÄ±nÄ± temizle
          errorMessage.value = '';

          // Yeni tahmini listeye ekle
          final guess = Guess(word: guessedWord, distance: rank);
          guesses.add(guess);
          lastGuess.value = guess;

          // Tahminleri `rank` deÄŸerine gÃ¶re sÄ±rala
          guesses.sort((a, b) => a.distance.compareTo(b.distance));

          // EÄŸer rank 1 ise (doÄŸru tahmin), anlamlarÄ±nÄ± gÃ¶ster
          if (rank == 1) {
            isGameOver.value = true; // Oyun bitti olarak iÅŸaretle
            prepareResultMessage(false); // DoÄŸru tahminle oyun bitti

            List<String> meanings =
                (await getWordMeaning(guessedWord)).cast<String>();

            // AnlamlarÄ± birleÅŸtir ve string'e dÃ¶nÃ¼ÅŸtÃ¼r
            String combinedMeanings = meanings.join(', ');

            showHowToDialog(
                context, guessedWord, combinedMeanings, Icons.abc_outlined);
          }

          // Tahmin text alanÄ±nÄ± temizle
          guessText.value = '';
        } else {
          print('Error: Rank is null or not an integer');
        }
      } else if (response.statusCode == 400) {
        // Kelime bulunamadÄ± hatasÄ± durumunda kullanÄ±cÄ±ya mesaj gÃ¶ster
        errorMessage.value = 'Bu kelime bulunamadÄ±, baÅŸka bir kelime deneyin!';
      } else {
        print('Error: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception caught: $e');
      errorMessage.value = 'Bir hata oluÅŸtu, lÃ¼tfen tekrar deneyin.';
    }
  }

  // Pes etme fonksiyonu, gizli kelimeyi gÃ¶sterir
  Future<void> giveUp() async {
    try {
      // API'den gizli kelimeyi al
      final response = await http.get(
        Uri.parse('${APIConstant.apiDomain}/reveal'),
        headers: {'Content-Type': 'application/json'},
      );

      // EÄŸer istek baÅŸarÄ±lÄ±ysa
      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        final hiddenWord = responseData['hidden_word'];

        // Gizli kelimeyi rank 1 ile tahmin olarak ekle
        final guess = Guess(word: hiddenWord, distance: 1);
        guesses.add(guess);
        lastGuess.value = guess;
        isGameOver.value = true;
        prepareResultMessage(true);
      } else {
        print('Error: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception caught: $e');
    }
  }

  // Kelimenin anlamÄ±nÄ± getiren fonksiyon
  Future<List> getWordMeaning(String word) async {
    try {
      // Kelimenin anlamÄ±nÄ± almak iÃ§in API'ye istek gÃ¶nder
      final response = await http.get(
        Uri.parse('${APIConstant.apiDomain}/meaning?word=$word'),
        headers: {'Content-Type': 'application/json'},
      );

      // EÄŸer istek baÅŸarÄ±lÄ±ysa anlamlarÄ±nÄ± dÃ¶ndÃ¼r
      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        final meanings = responseData['meanings'] as List;
        return meanings;
      } else {
        print('Error: ${response.statusCode}, ${response.body}');
        return [];
      }
    } catch (e) {
      print('Exception caught: $e');
      return [];
    }
  }

  void copyResult() {
    Clipboard.setData(ClipboardData(text: resultMessage.value));
    Get.snackbar('BaÅŸarÄ±lÄ±', 'SonuÃ§ kopyalandÄ±!',
        snackPosition: SnackPosition.TOP, backgroundColor: Colors.greenAccent);
  }
}
